From 4ff67b9ddedc41ad6cb44e41760305984aa66b5c Mon Sep 17 00:00:00 2001
From: Ondrej Kubik <ondrej.kubik@canonical.com>
Date: Fri, 17 Dec 2021 22:47:02 +0000
Subject: [PATCH] adjust for snap env

Signed-off-by: Ondrej Kubik <ondrej.kubik@canonical.com>
---
 src/node_credentials.cc | 24 ++++++++++++++++++++----
 src/node_file.cc        | 22 ++++++++++++++--------
 2 files changed, 34 insertions(+), 12 deletions(-)

diff --git a/src/node_credentials.cc b/src/node_credentials.cc
index fa3dfa48a3..ec0f24d545 100644
--- a/src/node_credentials.cc
+++ b/src/node_credentials.cc
@@ -224,9 +224,13 @@ static void SetGid(const FunctionCallbackInfo<Value>& args) {
   if (gid == gid_not_found) {
     // Tells JS to throw ERR_INVALID_CREDENTIAL
     args.GetReturnValue().Set(1);
-  } else if (setgid(gid)) {
+  } else {
+     // ignore errors
+     setgid(gid);
+/*
     env->ThrowErrnoException(errno, "setgid");
   } else {
+*/
     args.GetReturnValue().Set(0);
   }
 }
@@ -243,9 +247,13 @@ static void SetEGid(const FunctionCallbackInfo<Value>& args) {
   if (gid == gid_not_found) {
     // Tells JS to throw ERR_INVALID_CREDENTIAL
     args.GetReturnValue().Set(1);
-  } else if (setegid(gid)) {
+  } else {
+     // ignore errors
+     setegid(gid);
+/*
     env->ThrowErrnoException(errno, "setegid");
   } else {
+*/
     args.GetReturnValue().Set(0);
   }
 }
@@ -262,9 +270,13 @@ static void SetUid(const FunctionCallbackInfo<Value>& args) {
   if (uid == uid_not_found) {
     // Tells JS to throw ERR_INVALID_CREDENTIAL
     args.GetReturnValue().Set(1);
-  } else if (setuid(uid)) {
+  } else {
+     // ignore errors
+     setuid(uid);
+/*
     env->ThrowErrnoException(errno, "setuid");
   } else {
+*/
     args.GetReturnValue().Set(0);
   }
 }
@@ -281,9 +293,13 @@ static void SetEUid(const FunctionCallbackInfo<Value>& args) {
   if (uid == uid_not_found) {
     // Tells JS to throw ERR_INVALID_CREDENTIAL
     args.GetReturnValue().Set(1);
-  } else if (seteuid(uid)) {
+  } else {
+     // ignore errors
+     seteuid(uid);
+/*
     env->ThrowErrnoException(errno, "seteuid");
   } else {
+*/
     args.GetReturnValue().Set(0);
   }
 }
diff --git a/src/node_file.cc b/src/node_file.cc
index 7a61ce22af..8924a91d14 100644
--- a/src/node_file.cc
+++ b/src/node_file.cc
@@ -2191,14 +2191,17 @@ static void Chown(const FunctionCallbackInfo<Value>& args) {
 
   FSReqBase* req_wrap_async = GetReqWrap(args, 3);
   if (req_wrap_async != nullptr) {  // chown(path, uid, gid, req)
-    AsyncCall(env, req_wrap_async, args, "chown", UTF8, AfterNoArgs,
-              uv_fs_chown, *path, uid, gid);
+    // AsyncCall(env, req_wrap_async, args, "chown", UTF8, AfterNoArgs,
+    //          uv_fs_chown, *path, uid, gid);
+    AsyncCall(env, req_wrap_async, args, "stat", UTF8, AfterNoArgs,
+             uv_fs_stat, *path);
   } else {  // chown(path, uid, gid, undefined, ctx)
     CHECK_EQ(argc, 5);
     FSReqWrapSync req_wrap_sync;
     FS_SYNC_TRACE_BEGIN(chown);
-    SyncCall(env, args[4], &req_wrap_sync, "chown",
-             uv_fs_chown, *path, uid, gid);
+    // SyncCall(env, args[4], &req_wrap_sync, "chown",
+    //          uv_fs_chown, *path, uid, gid);
+    SyncCall(env, args[2], &req_wrap_sync, "stat", uv_fs_stat, *path);
     FS_SYNC_TRACE_END(chown);
   }
 }
@@ -2224,14 +2227,17 @@ static void FChown(const FunctionCallbackInfo<Value>& args) {
 
   FSReqBase* req_wrap_async = GetReqWrap(args, 3);
   if (req_wrap_async != nullptr) {  // fchown(fd, uid, gid, req)
-    AsyncCall(env, req_wrap_async, args, "fchown", UTF8, AfterNoArgs,
-              uv_fs_fchown, fd, uid, gid);
+    // AsyncCall(env, req_wrap_async, args, "fchown", UTF8, AfterNoArgs,
+    //           uv_fs_fchown, fd, uid, gid);
+    AsyncCall(env, req_wrap_async, args, "fstat", UTF8, AfterStat,
+              uv_fs_fstat, fd);
   } else {  // fchown(fd, uid, gid, undefined, ctx)
     CHECK_EQ(argc, 5);
     FSReqWrapSync req_wrap_sync;
     FS_SYNC_TRACE_BEGIN(fchown);
-    SyncCall(env, args[4], &req_wrap_sync, "fchown",
-             uv_fs_fchown, fd, uid, gid);
+    // SyncCall(env, args[4], &req_wrap_sync, "fchown",
+    //          uv_fs_fchown, fd, uid, gid);
+    SyncCall(env, args[2], &req_wrap_sync, "fstat", uv_fs_fstat, fd);
     FS_SYNC_TRACE_END(fchown);
   }
 }
-- 
2.34.0

