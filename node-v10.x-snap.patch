diff --git a/src/node_file.cc b/src/node_file.cc
index a3c46470fb..767a9ab24d 100644
--- a/src/node_file.cc
+++ b/src/node_file.cc
@@ -2034,14 +2034,17 @@ static void Chown(const FunctionCallbackInfo<Value>& args) {
 
   FSReqBase* req_wrap_async = GetReqWrap(env, args[3]);
   if (req_wrap_async != nullptr) {  // chown(path, uid, gid, req)
-    AsyncCall(env, req_wrap_async, args, "chown", UTF8, AfterNoArgs,
-              uv_fs_chown, *path, uid, gid);
+    // AsyncCall(env, req_wrap_async, args, "chown", UTF8, AfterNoArgs,
+    //           uv_fs_chown, *path, uid, gid);
+    AsyncCall(env, req_wrap_async, args, "stat", UTF8, AfterNoArgs,
+              uv_fs_stat, *path);
   } else {  // chown(path, uid, gid, undefined, ctx)
     CHECK_EQ(argc, 5);
     FSReqWrapSync req_wrap_sync;
     FS_SYNC_TRACE_BEGIN(chown);
-    SyncCall(env, args[4], &req_wrap_sync, "chown",
-             uv_fs_chown, *path, uid, gid);
+    // SyncCall(env, args[4], &req_wrap_sync, "chown",
+    //          uv_fs_chown, *path, uid, gid);
+    SyncCall(env, args[2], &req_wrap_sync, "stat", uv_fs_stat, *path);
     FS_SYNC_TRACE_END(chown);
   }
 }
@@ -2067,14 +2070,17 @@ static void FChown(const FunctionCallbackInfo<Value>& args) {
 
   FSReqBase* req_wrap_async = GetReqWrap(env, args[3]);
   if (req_wrap_async != nullptr) {  // fchown(fd, uid, gid, req)
-    AsyncCall(env, req_wrap_async, args, "fchown", UTF8, AfterNoArgs,
-              uv_fs_fchown, fd, uid, gid);
+    // AsyncCall(env, req_wrap_async, args, "fchown", UTF8, AfterNoArgs,
+    //           uv_fs_fchown, fd, uid, gid);
+    AsyncCall(env, req_wrap_async, args, "fstat", UTF8, AfterStat,
+              uv_fs_fstat, fd);
   } else {  // fchown(fd, uid, gid, undefined, ctx)
     CHECK_EQ(argc, 5);
     FSReqWrapSync req_wrap_sync;
     FS_SYNC_TRACE_BEGIN(fchown);
-    SyncCall(env, args[4], &req_wrap_sync, "fchown",
-             uv_fs_fchown, fd, uid, gid);
+    // SyncCall(env, args[4], &req_wrap_sync, "fchown",
+    //          uv_fs_fchown, fd, uid, gid);
+    SyncCall(env, args[2], &req_wrap_sync, "fstat", uv_fs_fstat, fd);
     FS_SYNC_TRACE_END(fchown);
   }
 }
diff --git a/src/node_process.cc b/src/node_process.cc
index e008d2a9a6..5c76fcdeaa 100644
--- a/src/node_process.cc
+++ b/src/node_process.cc
@@ -408,8 +408,10 @@ void SetGid(const FunctionCallbackInfo<Value>& args) {
   if (gid == gid_not_found)
     return env->ThrowError("setgid group id does not exist");
 
+/*
   if (setgid(gid))
     return env->ThrowErrnoException(errno, "setgid");
+*/
 }
 
 
@@ -425,8 +427,10 @@ void SetEGid(const FunctionCallbackInfo<Value>& args) {
   if (gid == gid_not_found)
     return env->ThrowError("setegid group id does not exist");
 
+/*
   if (setegid(gid))
     return env->ThrowErrnoException(errno, "setegid");
+*/
 }
 
 
@@ -442,8 +446,10 @@ void SetUid(const FunctionCallbackInfo<Value>& args) {
   if (uid == uid_not_found)
     return env->ThrowError("setuid user id does not exist");
 
+/*
   if (setuid(uid))
     return env->ThrowErrnoException(errno, "setuid");
+*/
 }
 
 
@@ -459,8 +465,10 @@ void SetEUid(const FunctionCallbackInfo<Value>& args) {
   if (uid == uid_not_found)
     return env->ThrowError("seteuid user id does not exist");
 
+/*
   if (seteuid(uid))
     return env->ThrowErrnoException(errno, "seteuid");
+*/
 }
 
 
